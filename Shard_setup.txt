Sharding Setup
4 shards with 3 replSets (replication factor of 3)
ie 12 mongod (shard servers)

We will run 4 mongos processes.
We will run 3 config servers.

===================================
run the commands in run.sh scripts or modify and run the script.

#looking for processes and logs
echo
ps -A | grep mongo

echo 
tail -n 1 log.cfg0
tail -n 1 log.cfg1
tail -n 1 log.cfg2

echo
tail -n 1 log.a0
tail -n 1 log.a1
tail -n 1 log.a2
tail -n 1 log.b0
tail -n 1 log.b1
tail -n 1 log.b2
tail -n 1 log.c0
tail -n 1 log.c1
tail -n 1 log.c2
tail -n 1 log.d0
tail -n 1 log.d1
tail -n 1 log.d2

echo
tail -n 1 log.mongos0
tail -n 1 log.mongos1
tail -n 1 log.mongos2
tail -n 1 log.mongos3
============================

setup config db (this is the db that contains all metadata on servers including where all chunks/shards are etc..)
Note** using mongo now will connect to mongos (the acting gateway)

mongo

mongos>....

use config
show collections
sh.status()

use config
show collections
db.chunks.find()
db.shards.find()
sh.help()
==

#Adding shards

#sh.addShard(replicasetname/one of the hostname)
sh.addShard("a/localhost:27000")
sh.addShard("b/localhost:27100")
sh.addShard("c/localhost:27200")
sh.addShard("d/localhost:27300")
sh.status()

#checking status should show
mongos> sh.status()
--- Sharding Status --- 
  sharding version: {
  	"_id" : 1,
  	"minCompatibleVersion" : 5,
  	"currentVersion" : 6,
  	"clusterId" : ObjectId("5cd3e47d0f772c02a04611e9")
  }
  shards:
        {  "_id" : "a",  "host" : "a/localhost:27000,localhost:27001,localhost:27002",  "state" : 1 }
        {  "_id" : "b",  "host" : "b/localhost:27100,localhost:27101,localhost:27102",  "state" : 1 }
        {  "_id" : "c",  "host" : "c/localhost:27200,localhost:27201,localhost:27202",  "state" : 1 }
        {  "_id" : "d",  "host" : "d/localhost:27300,localhost:27301,localhost:27302",  "state" : 1 }
  active mongoses:
        "4.0.9" : 4
  autosplit:
        Currently enabled: yes
  balancer:
        Currently enabled:  yes
        Currently running:  no
        Failed balancer rounds in last 5 attempts:  0
        Migration Results for the last 24 hours: 
                No recent migrations
  databases:
        {  "_id" : "config",  "primary" : "config",  "partitioned" : true }

====
unsharded collections reside on first shard
sh.enableSharding("dbname")
sh.shardCollection("dbname.collectionname",{_id:1,true}}
In shard collection , thr is always index on shard key

create a database
create a collection
Insert some data

--sh.enableSharding("newdb")
--sh.shardCollection("newdb.t",{_id:1},true)
--db.t.stats()
--db.getLastErrorObj()

--db.t.getIndexes()
creating indexes on x
--db.t.ensureIndex({x:1})
===



t.find({"_id": ObjectId("")},{longer:0}).explain
might show query plan at cluster level showing which shard was queried.
t.find({x: -1}).explain  (checking what happens when you query some specific value)
#remember query can trigger overhead, if query is being sent to all or different shards for querying the data.
ie scatter-gather query

