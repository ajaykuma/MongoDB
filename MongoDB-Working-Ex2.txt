MongoDB working
--------------
cls --- to clear screen

show dbs (shows default local database)

db ( to look into database you are in )
>db
test

In MongoDB default database is test. If you didn't create any database, then collections will be stored in test database.

>db.firstdoc.insert({"name":"europe"})

#Looking for options at DB level
> db.
db.adminCommand(               db.getCollection(              db.group(                      db.runCommandWithMetadata(
db.auth(                       db.getCollectionInfos(         db.groupcmd(                   db.runReadCommand(
db.changeUserPassword(         db.getCollectionNames(         db.groupeval(                  db.serverBits(
db.cloneCollection(            db.getLastError(               db.hasOwnProperty              db.serverBuildInfo(
db.cloneDatabase(              db.getLastErrorCmd(            db.help(                       db.serverCmdLineOpts(
db.commandHelp(                db.getLastErrorObj(            db.hostInfo(                   db.serverStatus(
db.constructor                 db.getLogComponents(           db.isMaster(                   db.setLogLevel(
db.copyDatabase(               db.getMongo(                   db.killOP(                     db.setProfilingLevel(
db.createCollection(           db.getName(                    db.killOp(                     db.setSlaveOk(
db.createRole(                 db.getPrevError(               db.listCommands(               db.setWriteConcern(
db.createUser(                 db.getProfilingLevel(          db.loadServerScripts(          db.shutdownServer(
db.createView(                 db.getProfilingStatus(         db.logout(                     db.stats(
db.currentOP(                  db.getQueryOptions(            db.printCollectionStats(       db.toLocaleString
db.currentOp(                  db.getReplicationInfo(         db.printReplicationInfo(       db.toString(
db.dbEval(                     db.getRole(                    db.printShardingStatus(        db.tojson(
db.dropAllRoles(               db.getRoles(                   db.printSlaveReplicationInfo(  db.unsetWriteConcern(
db.dropAllUsers(               db.getSiblingDB(               db.propertyIsEnumerable        db.updateRole(
db.dropDatabase(               db.getSisterDB(                db.prototype                   db.updateUser(
db.dropRole(                   db.getSlaveOk(                 db.removeUser(                 db.upgradeCheck(
db.dropUser(                   db.getUser(                    db.repairDatabase(             db.upgradeCheckAllDBs(
db.eval(                       db.getUsers(                   db.resetError(                 db.valueOf(
db.firstdoc                    db.getWriteConcern(            db.revokePrivilegesFromRole(   db.version(
db.forceError(                 db.grantPrivilegesToRole(      db.revokeRolesFromRole(
db.fsyncLock(                  db.grantRolesToRole(           db.revokeRolesFromUser(
db.fsyncUnlock(                db.grantRolesToUser(           db.runCommand(

> db.getCollectionNames()
[ "firstdoc" ]

> show dbs
admin  0.000GB
local  0.000GB
test   0.000GB
mycust       0.000GB
mycustomers  0.000GB

use dbname ( to create a database and this command switches to the database created)

> use test12
switched to db test12

> db
test12

>show dbs (doesnot show your database)
To display database, you need to insert at least one document into it.

> db.test12.save({c:20})
WriteResult({ "nInserted" : 1 })

> db.test12.find()
{ "_id" : ObjectId("5c0edaa2cb6ad0065017fc64"), "c" : 20 }

> db.test12.find().pretty()
{ "_id" : ObjectId("5c0edaa2cb6ad0065017fc64"), "c" : 20 }

> db.test12.save({c:201})
WriteResult({ "nInserted" : 1 })

> db.test12.find().pretty()
{ "_id" : ObjectId("5c0edaa2cb6ad0065017fc64"), "c" : 20 }
{ "_id" : ObjectId("5c0edaf4cb6ad0065017fc65"), "c" : 201 }

*After Inserting in test12

> show dbs
test12  0.000GB

> use customerpref
switched to db customerpref

> show dbs
admin        0.000GB
local        0.000GB
mycust       0.000GB
test12       0.000GB
test         0.000GB
mycustomers  0.000GB

> db.customerpref.save({name: "aj"})
WriteResult({ "nInserted" : 1 })

> show dbs
admin         0.000GB
customerpref  0.000GB
local         0.000GB
mycust   0.000GB
test12        0.000GB
test         0.000GB
mycustomers  0.000GB


> use customerpref
switched to db customerpref

> db.drop
db.dropAllRoles(  db.dropAllUsers(  db.dropDatabase(  db.dropRole(      db.dropUser(

> db.dropDatabase()
{ "dropped" : "customerpref", "ok" : 1 }

> show dbs
admin        0.000GB
local        0.000GB
mycust  0.000GB
test12       0.000GB
test         0.000GB
mycustomers  0.000GB

>db.help()
Shows DB methods

>db.collections.<tab> <tab>

>db.mycollection.<tab> <tab>

>db.serverStatus()

>db.getCollectionInfos()

> db.createCollection("items", {capped: true, size : 75000000, max: 1000})
{ "ok" : 1 }

=======================================
Continue working...

#Document is a Json or Java script object
{
	field1:value,
	field2:value
}

for example :
({
	first_name: "cool",
	last_name: "Singh",
	memberships: ["mem1","mem2"],    <==============array
	address: {				<============object
		   city: "hilde",
		   country: "Germ"
		 }
	contacts: [
		      {name: "tom", relationship: "friend"}
		   ]
})

Creating a user for database

> db.createUser({
... user:"vj",
... pwd: "1234",
... roles: ["readWrite","dbAdmin"]
...      });
Successfully added user: { "user" : "vj", "roles" : [ "readWrite", "dbAdmin" ] }			

====================================================
Collections are similar to tables in relational database

> use customerpref
switched to db customerpref

> db.createCollection("customers")
{ "ok" : 1 }

> show collections;
customers

db.<tab> <tab>
> db.
db.adminCommand(               db.eval(                       db.getSiblingDB(               db.logout(                     db.setLogLevel(
db.auth(                       db.forceError(                 db.getSisterDB(                db.printCollectionStats(       db.setProfilingLevel(
db.changeUserPassword(         db.fsyncLock(                  db.getSlaveOk(                 db.printReplicationInfo(       db.setSlaveOk(  .......

db.customers.<tab> <tab>
> db.customers.
db.customers.addIdIfNeeded(              db.customers.find(                       db.customers.getSlaveOk(                 db.customers.replaceOne(
db.customers.aggregate(                  db.customers.findAndModify(              db.customers.getSplitKeysForChunks(      db.customers.runCommand(
db.customers.bulkWrite(                  db.customers.findOne(                    db.customers.getWriteConcern(            db.customers.runReadCommand(
db.customers.constructor                 db.customers.findOneAndDelete(           db.customers.group(                      db.customers.save(
..............

> db.customers.insert({first_name: "aj",last_name: "singh"})

WriteResult({ "nInserted" : 1 })

> db.customers.find()

{ "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"), "first_name" : "aj", "last_name" : "singh" }
Note** id is unique id which can be used for varios purposes

Adding more data with different fields
> db.customers.insert([{first_name: "caj",last_name: "singh"},{first_name: "daj",last_name: "singh",gender: "male"}])
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 2,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})
> db.customers.find()
{ "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"), "first_name" : "aj", "last_name" : "singh" }
{ "_id" : ObjectId("5c0e48f6cb6ad0065017fc5e"), "first_name" : "caj", "last_name" : "singh" }
{ "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"), "first_name" : "daj", "last_name" : "singh", "gender" : "male" }

====================
Using a Helper function
> db.customers.find().pretty()
{
        "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"),
        "first_name" : "aj",
        "last_name" : "singh"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5e"),
        "first_name" : "caj",
        "last_name" : "singh"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}

Updating values:
> db.customers.update({first_name: "aj"},{gender: "male"});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{ "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"), "gender" : "male" }
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5e"),
        "first_name" : "caj",
        "last_name" : "singh"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}

Updating correctly:
> db.customers.update({first_name: "aj"},{first_name:"aj",last_name: "singh",gender: "male"});
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.customers.find().pretty()
{ "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"), "gender" : "male" }
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5e"),
        "first_name" : "caj",
        "last_name" : "singh"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}
Note** Above nothing matches

> db.customers.update({_id: ObjectId("5c0e47fdcb6ad0065017fc5d")},{first_name:"aj",last_name: "singh",gender: "male"});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"),
        "first_name" : "aj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5e"),
        "first_name" : "caj",
        "last_name" : "singh"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}

Instead of completely givng all fields or using _id, we can use set operator

> db.customers.update({first_name: "caj"},{$set:{gender: "female"}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"),
        "first_name" : "aj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5e"),
        "first_name" : "caj",
        "last_name" : "singh",
        "gender" : "female"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}
==========================================
Using inc, ie incrementing operator to increment numeric values
> db.customers.update({first_name: "caj"},{$set:{age: 55}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"),
        "first_name" : "aj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5e"),
        "first_name" : "caj",
        "last_name" : "singh",
        "gender" : "female",
        "age" : 55
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}

**incrementing value

> db.customers.update({first_name: "caj"},{$inc:{age: 5}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"),
        "first_name" : "aj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5e"),
        "first_name" : "caj",
        "last_name" : "singh",
        "gender" : "female",
        "age" : 60
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}

====================================
To remove a field
> db.customers.update({first_name: "caj"},{$unset:{age: 1}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"),
        "first_name" : "aj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5e"),
        "first_name" : "caj",
        "last_name" : "singh",
        "gender" : "female"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}

If updating something that has no match,and if so, inserting it ( or we say upserting it)
> db.customers.update({first_name: "faj"},{first_name:"faj",last_name:"singh"},{upsert: true});
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 1,
        "nModified" : 0,
        "_id" : ObjectId("5c0e4f8a4592f769941d1e67")
})
> db.customers.find().pretty()
{
        "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"),
        "first_name" : "aj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5e"),
        "first_name" : "caj",
        "last_name" : "singh",
        "gender" : "female"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e4f8a4592f769941d1e67"),
        "first_name" : "faj",
        "last_name" : "singh"
}
==================================
Using rename to change a field
> db.customers.update({first_name: "caj"},{$rename:{"gender": "sex"}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"),
        "first_name" : "aj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5e"),
        "first_name" : "caj",
        "last_name" : "singh",
        "sex" : "female"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e4f8a4592f769941d1e67"),
        "first_name" : "faj",
        "last_name" : "singh"
}
====================================
Removing a document
> db.customers.remove({first_name: "caj"});
WriteResult({ "nRemoved" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"),
        "first_name" : "aj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e4f8a4592f769941d1e67"),
        "first_name" : "faj",
        "last_name" : "singh"
}

removing only first/one occurence
> db.customers.remove({first_name: "faj"},{justOne: true});
WriteResult({ "nRemoved" : 1 })
> db.customers.find().pretty()
{
        "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"),
        "first_name" : "aj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}
============================================
Adding more data
db.customers.insert([{first_name: "ddcaj",last_name: "singhi"},{first_name: "dddaj",last_name: "singhy",gender: "male"}])
db.customers.insert([{first_name: "ddcajy",last_name: "singhiy"},{first_name: "dddajy",last_name: "singhyy",address: {street: 23,houseno: 104}}])

> db.customers.find().pretty()
{
        "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"),
        "first_name" : "aj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e58f6cb6ad0065017fc60"),
        "first_name" : "ddcaj",
        "last_name" : "singhi"
}
{
        "_id" : ObjectId("5c0e58f6cb6ad0065017fc61"),
        "first_name" : "dddaj",
        "last_name" : "singhy",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e598ecb6ad0065017fc62"),
        "first_name" : "ddcajy",
        "last_name" : "singhiy"
}
{
        "_id" : ObjectId("5c0e598ecb6ad0065017fc63"),
        "first_name" : "dddajy",
        "last_name" : "singhyy",
        "address" : {
                "street" : 23,
                "houseno" : 104
        }
}

db.customers.count()
================================
searching for data
db.customers.find(first_name: "dddajy")
2018-12-10T13:23:10.950+0100 E QUERY    [thread1] SyntaxError: missing ) after argument list @(shell):1:28

> db.customers.find({first_name: "dddajy"})
{ "_id" : ObjectId("5c0e598ecb6ad0065017fc63"), "first_name" : "dddajy", "last_name" : "singhyy", "address" : { "street" : 23, "houseno" : 104 } }
> db.customers.find({first_name: "dddajy"}).pretty()
{
        "_id" : ObjectId("5c0e598ecb6ad0065017fc63"),
        "first_name" : "dddajy",
        "last_name" : "singhyy",
        "address" : {
                "street" : 23,
                "houseno" : 104
        }
}

Using or
> db.customers.find({$or: [{first_name: "dddajy"},{first_name: "daj"}]}).pretty()
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e598ecb6ad0065017fc63"),
        "first_name" : "dddajy",
        "last_name" : "singhyy",
        "address" : {
                "street" : 23,
                "houseno" : 104
        }
}

> db.customers.find({last_name: "singh"}).pretty()
{
        "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"),
        "first_name" : "aj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}

We can use gt,lt,gte,lte for searching

> db.customers.find({"address.street" : 23}).pretty();
{
        "_id" : ObjectId("5c0e598ecb6ad0065017fc63"),
        "first_name" : "dddajy",
        "last_name" : "singhyy",
        "address" : {
                "street" : 23,
                "houseno" : 104
        }
}
> db.customers.find({"address.street" : {$gt: 22}}).pretty();
{
        "_id" : ObjectId("5c0e598ecb6ad0065017fc63"),
        "first_name" : "dddajy",
        "last_name" : "singhyy",
        "address" : {
                "street" : 23,
                "houseno" : 104
        }
}
=========================================
Sorting data

> db.customers.find().sort({first_name: -1}).pretty()
{
        "_id" : ObjectId("5c0e598ecb6ad0065017fc63"),
        "first_name" : "dddajy",
        "last_name" : "singhyy",
        "address" : {
                "street" : 23,
                "houseno" : 104
        }
}
{
        "_id" : ObjectId("5c0e58f6cb6ad0065017fc61"),
        "first_name" : "dddaj",
        "last_name" : "singhy",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e598ecb6ad0065017fc62"),
        "first_name" : "ddcajy",
        "last_name" : "singhiy"
}
{
        "_id" : ObjectId("5c0e58f6cb6ad0065017fc60"),
        "first_name" : "ddcaj",
        "last_name" : "singhi"
}
{
        "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"),
        "first_name" : "daj",
        "last_name" : "singh",
        "gender" : "male"
}
{
        "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"),
        "first_name" : "aj",
        "last_name" : "singh",
        "gender" : "male"
}
===============================
Counting

> db.customers.find({first_name: "aj"}).count()
1
Limiting

> db.customers.find().limit(2)
{ "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"), "first_name" : "aj", "last_name" : "singh", "gender" : "male" }
{ "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"), "first_name" : "daj", "last_name" : "singh", "gender" : "male" }

finding, limiting and sorting
> db.customers.find().limit(2).sort({first_name:1})
{ "_id" : ObjectId("5c0e47fdcb6ad0065017fc5d"), "first_name" : "aj", "last_name" : "singh", "gender" : "male" }
{ "_id" : ObjectId("5c0e48f6cb6ad0065017fc5f"), "first_name" : "daj", "last_name" : "singh", "gender" : "male" }
> db.customers.find().limit(2).sort({first_name:-1})
{ "_id" : ObjectId("5c0e598ecb6ad0065017fc63"), "first_name" : "dddajy", "last_name" : "singhyy", "address" : { "street" : 23, "houseno" : 104 } }
{ "_id" : ObjectId("5c0e58f6cb6ad0065017fc61"), "first_name" : "dddaj", "last_name" : "singhy", "gender" : "male" }
>

Iterating by using foreach

> db.customers.find().forEach(function(doc){print("Customer_name:"+doc.first_name)});
Customer_name:aj
Customer_name:daj
Customer_name:ddcaj
Customer_name:dddaj
Customer_name:ddcajy
Customer_name:dddajy

