#to check sharding status
sh.status()

#creating a database
use sharddemo 

#creating collections
db.createCollection("movies")

db.createCollection("movies2")

#to check if collection is sharded
db.movies2.getShardDistribution()

#say movies2 collection is empty
choosing title as key for sharding and type is hashed
sh.shardCollection("sharddemo.movies2",{"title":"hashed"})
#might throw an error as sharding is not yet enabled

#enabling sharding
sh.enableSharding("sharddemo")

#one of the shards is elected as primary shard
sh.shardCollection("sharddemo.movies2",{"title":"hashed"})
#check status
db.movies2.getShardDistribution()

#this one is not sharded
db.movies.getShardDistribution()

#using a forloop to insert some data into sharded collection
>for i in {1..50}; do echo -e "use sharddemo \n db.movies2.insertOne({\"title\": \"Spider Man $i\", \"language\": \"English\"})" | mongo mongodb://ipaddress:port; done

#check collection
use sharddemo
db.movies2.find()
db.movies2.count()

#checking will show chunks, no of documents in each chunk and %age of occupancy
db.movies2.getShardDistribution()

#sharding a collection which already has data
>for i in {1..5}; do echo -e "use sharddemo \n db.movies.insertOne({\"title\": \"Spider Man $i\", \"language\": \"English\"})" | mongo mongodb://ipaddress:port; done

db.movies.getShardDistribution()
#if we try to shard this collection
sh.shardCollection("sharddemo.movies2",{"title":"hashed"})
#will throw an error "Please create an index that starts with the proposed shard key before sharding the collection"

db.movies.createIndex({"title":"hashed"})
sh.shardCollection("sharddemo.movies2",{"title":"hashed"})
db.movies.getShardDistribution()

sh.status()

#for all collections where sharding is not enabled, collections go to primary shard...











