#Measuring Indexes
rs0:PRIMARY> use mycustomers
switched to db mycustomers

rs0:PRIMARY> show collections
customers
customers1
customers2

rs0:PRIMARY> db.customers2.aggregate([{$indexStats:{}}])
{ "name" : "address_1", "key" : { "address" : 1 }, "host" : "m1:27017", "accesses" : { "ops" : NumberLong(0), "since" : ISODate("2020-02-06T08:19:52.399Z") } }
{ "name" : "last_name_1", "key" : { "last_name" : 1 }, "host" : "m1:27017", "accesses" : { "ops" : NumberLong(0), "since" : ISODate("2020-02-06T08:19:52.399Z") } }
{ "name" : "_id_", "key" : { "_id" : 1 }, "host" : "m1:27017", "accesses" : { "ops" : NumberLong(0), "since" : ISODate("2020-02-06T08:19:52.399Z") } }

#Using explain refer:
MongoDB-Working-Ex5.txt
Understanding_Explain.txt

#looking at stats
rs0:PRIMARY> db.serverStatus()

rs0:PRIMARY> db.stats()
{
	"db" : "mycustomers",
	"collections" : 3,
	"views" : 0,
	"objects" : 34,
	"avgObjSize" : 212.08823529411765,
	"dataSize" : 7211,
	"storageSize" : 90112,
	"numExtents" : 0,
	"indexes" : 5,
	"indexSize" : 98304,
	"fsUsedSize" : 11113463808,
	"fsTotalSize" : 32676655104,
	"ok" : 1,
	"operationTime" : Timestamp(1580980619, 1),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1580980619, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}

rs0:PRIMARY> db.runCommand({dbStats:1,scale:1})
{
	"db" : "mycustomers",
	"collections" : 3,
	"views" : 0,
	"objects" : 34,
	"avgObjSize" : 212.08823529411765,
	"dataSize" : 7211,
	"storageSize" : 90112,
	"numExtents" : 0,
	"indexes" : 5,
	"indexSize" : 98304,
	"fsUsedSize" : 11113463808,
	"fsTotalSize" : 32676655104,
	"ok" : 1,
	"operationTime" : Timestamp(1580980689, 1),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1580980689, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
#scale argument used to scale byte values
#For the fastest processing, ensure that your indexes fit entirely in RAM so that the system can avoid reading the index from disk.

#to check size of index
db.collection.totalIndexSize()

#In MongoDB, sort operations can obtain the sort order by retrieving documents based on the ordering in an index. If the query planner cannot obtain the sort order from an index, it will sort the results in memory. Sort operations that use an index often have better performance than those that do not use an index.

#In most cases the query optimizer selects the optimal index for a specific operation; however, you can force MongoDB to use a specific index using the hint() method. Use hint() to support performance testing, or on some queries where you must select a field or field included in several indexes.

#Use MongoDBâ€™s $inc operator to increment or decrement values in documents. The operator increments the value of the field on the server side, as an alternative to selecting a document, making simple modifications in the client and then writing the entire document to the server. The $inc operator can also help avoid race conditions, which would result when two application instances queried for a document, manually incremented a field, and saved the entire document back at the same time.


