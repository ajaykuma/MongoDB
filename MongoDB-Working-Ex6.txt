#Creating collection with specific _id

rs0:PRIMARY> db.coll2.save({_id:1,a:[{loc:"A",qty:5},{qty:10}]})
WriteResult({ "nMatched" : 0, "nUpserted" : 1, "nModified" : 0, "_id" : 1 })

rs0:PRIMARY> db.coll2.find()
{ "_id" : 1, "a" : [ { "loc" : "A", "qty" : 5 }, { "qty" : 10 } ] }

rs0:PRIMARY> db.coll2.getIndexes()
[
	{
		"v" : 2,
		"key" : {
			"_id" : 1
		},
		"name" : "_id_",
		"ns" : "coll1.coll2"
	}
]

#creating collection without specifying _id

rs0:PRIMARY> db.coll3.save({a:[{loc:"A",qty:5},{qty:10}]})
WriteResult({ "nInserted" : 1 })

rs0:PRIMARY> db.coll3.find()
{ "_id" : ObjectId("5e39fe68531a413ee181db58"), "a" : [ { "loc" : "A", "qty" : 5 }, { "qty" : 10 } ] }

rs0:PRIMARY> db.coll3.getIndexes()
[
	{
		"v" : 2,
		"key" : {
			"_id" : 1
		},
		"name" : "_id_",
		"ns" : "coll1.coll3"
	}
]

#creating compound index and enforcing uniqueness on a combination

rs0:PRIMARY> db.coll2.createIndex({"a.loc": 1,"a.qty":1},{unique:true})
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1,
	"operationTime" : Timestamp(1580859261, 1),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1580859261, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
rs0:PRIMARY> db.coll2.save({_id:2,a:[{loc:"A"},{qty:50}]})
WriteResult({ "nMatched" : 0, "nUpserted" : 1, "nModified" : 0, "_id" : 2 })

rs0:PRIMARY> db.coll2.save({_id:3,a:[{loc:"A",qty:50}]})
WriteResult({ "nMatched" : 0, "nUpserted" : 1, "nModified" : 0, "_id" : 3 })

rs0:PRIMARY> db.coll2.find()
{ "_id" : 1, "a" : [ { "loc" : "A", "qty" : 5 }, { "qty" : 10 } ] }
{ "_id" : 2, "a" : [ { "loc" : "A" }, { "qty" : 50 } ] }
{ "_id" : 3, "a" : [ { "loc" : "A", "qty" : 50 } ] }

#creating index for a replica set (rolling procedure)

#creating partial index
rs0:PRIMARY> db.customers2.createIndex({"last_name":1},{partialFilterExpression: {"city": {$eq: "dublin"}}})

#Here partialindex is also acting as sparse index ie selecting documents based on existence of field

rs0:PRIMARY> db.customers2.createIndex({"address":1},{partialFilterExpression: {"city": {$exists: true}}})


